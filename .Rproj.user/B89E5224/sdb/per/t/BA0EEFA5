{
    "collab_server" : "",
    "contents" : "pacman::p_load(rvest, magrittr, tidyverse, xml2)\n\n# library(rvest)\n# library(magrittr)\n# library(dplyr)\n# library(tidyr)\n# library(xml2)\n\nacademic_year <- '2017'\nyear_index <- '12480'\nbase_url <- 'http://stats.ncaa.org'\n\n\n# create team mapping function --------------------------------------------\n\ncreate_team_mapping <- function(academic_year, year_index) { \n  search_url <- paste0(base_url, '/team/inst_team_list?sport_code=MBB&division=1&academic_year=', \n                        academic_year, '&division=1')\n  doc <- read_html(search_url)\n  team_nodes <- html_nodes(doc, '.css-panes a')\n  team_mapping <- lapply(team_nodes, function(x) {\n    team_name <- xml_text(x)\n    team_url <- xml_attr(x, 'href')\n    team_id <- team_url %>% gsub(paste0(year_index, '$'), '', .) %>% gsub('/|team', '', .)\n    team_url <- paste0(\"http://stats.ncaa.org\", team_url)\n    c(team_id=team_id, team_name=team_name, team_url=team_url)\n    # as.list(c(team_name=team_name, team_url=team_url))\n  })\n  team_mapping <- plyr::ldply(team_mapping)\n  team_mapping <- tbl_df(team_mapping)\n  team_mapping$index <- 1:nrow(team_mapping)\n  team_mapping <- team_mapping %>% select(index, team_id, team_name, team_url)\n}\n\n\n\n# create schedule mapping -------------------------------------------------\n# game_id, home_team_id, away_team_id, date, neutral_site, game_link\n# UNC is team_id 457, row 196\n# team_mapping %>% filter(team_id == 457)\n\ncreate_schedule_mapping <- function(team_id, year_index) {\n  search_url <- paste(base_url, 'team', team_id, year_index, sep = '/')\n  doc <- read_html(search_url) \n  \n  my_table <- html_table(doc, fill = TRUE)[[2]]\n  names(my_table) <- my_table[2,] %>% stringr::str_to_lower()\n  my_table <- my_table[3:nrow(my_table),]\n  row.names(my_table) <- NULL\n  my_table <- my_table %>% tbl_df()\n  \n  doc <- html_nodes(doc, '.smtext')\n  my_list <- list()\n  for (i in seq(1, length(doc), by = 3)) { \n    game_date <- xml_text(doc[[i]])\n    opponent <- xml_text(doc[[i+1]], trim = TRUE)\n    opponent_id <- html_nodes(doc[[i+1]], 'a') %>% xml_attr('href') %>% \n      gsub(\".*team/|/[0-9]{5}$\", \"\", .)\n    opponent_id <- ifelse(length(opponent_id)==0, 'unknown', opponent_id)\n    \n    if (grepl('@', opponent)) {\n      home_team_id <- opponent_id\n      away_team_id <- team_id\n      } else { \n      home_team_id <- team_id\n      away_team_id <- opponent_id\n      }\n    \n    neutral_site <- ifelse(grepl(',', opponent), 1, 0)\n\n    game_link <- html_nodes(doc[[i+2]], 'a') %>% xml_attr('href')\n    game_link <- ifelse(length(game_link)==0, 'unknown', game_link)\n    game_id <- gsub(\".*index/|\\\\?.*\", \"\", game_link)\n    \n    my_list[[length(my_list)+1]] <- c(game_id = game_id, game_date = game_date, home_team_id = home_team_id, \n                                      away_team_id = away_team_id, neutral_site = neutral_site, game_link = game_link)\n  }\n  schedule_mapping <- do.call(rbind, my_list) %>% as.data.frame(stringsAsFactors = FALSE) %>% tbl_df()\n  # list(schedule_mapping = schedule_mapping, schedule_table = my_table)\n}\n\n\n\n# create player mapping ---------------------------------------------------\n\ncreate_player_mapping <- function(team_id, year_index) {\n  search_url <- paste(base_url, 'team', team_id, 'roster', year_index, sep = '/')\n  doc <- read_html(search_url)\n  \n  player_mapping <- html_table(doc, header = FALSE)[[1]]\n  names(player_mapping) <- player_mapping[2,] %>% stringr::str_to_lower()\n  player_mapping <- player_mapping[3:nrow(player_mapping),]\n  player_mapping <- cbind(team_id = team_id, player_mapping, stringsAsFactors = FALSE, \n                          row.names = NULL)\n  \n  player_id <- html_nodes(doc, 'td') %>% xml_children() %>% xml_attr('href')\n  player_id <- gsub('.*seq=', '', player_id)\n  player <- html_nodes(doc, 'td') %>% xml_children() %>% xml_text()\n  players <- cbind(player, player_id) %>% as.data.frame(stringsAsFactors = FALSE, row.names = NULL) %>% tbl_df()\n  \n  player_mapping <- left_join(player_mapping, players, by = 'player')\n}\n\n\n\n# TODO: get_box_score get_play_by_play get_individual_stats get_aggregate_stats\nget_pbp <- function(game_id) { \n    cat('Retrieving PBP: ', game_id, '\\n')\n    doc <- read_html(paste0('http://stats.ncaa.org/game/play_by_play/', game_id))\n    pbp <- list()\n    for(i in 2:(html_nodes(doc, '.mytable') %>% html_table() %>% length())) { \n        pbp[[i-1]] <- html_nodes(doc, '.mytable')[[i]] %>% html_table(header=TRUE) %>% tbl_df() %>% mutate(period=i-1, game_id=game_id)\n    }\n    pbp <- plyr::ldply(pbp) %>% tbl_df()\n    names(pbp) <- names(pbp) %>% tolower() %>% gsub(' ', '_', .)\n    pbp <- pbp %>% select(game_id, period) %>% left_join(., pbp, by = c('game_id', 'period'))\n    return(pbp)\n}\n\n\n",
    "created" : 1484745340836.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "829670629",
    "id" : "BA0EEFA5",
    "lastKnownWriteTime" : 1489542936,
    "last_content_update" : 1489542936668,
    "path" : "~/R/ncaa-basketball/mapping-functions.R",
    "project_path" : "mapping-functions.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}